/**
 * MIT License
 * 
 * Copyright (c) 2022 Jeff Sember
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 **/
package dev;

import static js.base.Tools.*;

import java.io.File;
import java.util.List;

import dev.tokn.DFACompiler;
import js.app.AppOper;
import js.app.CmdLineArgs;
import js.file.Files;
import js.json.JSMap;

public class DFAOper extends AppOper {

  @Override
  public String userCommand() {
    return "dfa";
  }

  @Override
  public String getHelpDescription() {
    return "compile ." + OBJECT_EXT + " file from an ." + SOURCE_EXT + " file";
  }

  @Override
  protected List<Object> getAdditionalArgs() {
    return arrayList(//
        "<." + SOURCE_EXT + " input>", //
        "[<." + OBJECT_EXT + " output>]", //
        "ids <source file>");
  }

  @Override
  protected void processAdditionalArgs() {
    CmdLineArgs args = app().cmdLineArgs();
    int i = 0;
    while (args.hasNextArg()) {
      String a = args.nextArg();
      if (a.equals("ids")) {
        File relPath = new File(args.nextArg());
        if (!relPath.isAbsolute()) {
          relPath = new File(Files.currentDirectory(), relPath.toString());
        }
        mIdSourceFile = relPath;
        continue;
      }
      if (i >= 2)
        break;
      File relPath = new File(a);
      if (!relPath.isAbsolute()) {
        relPath = new File(Files.currentDirectory(), relPath.toString());
      }
      mFiles.add(relPath);
      i++;
    }

    args.assertArgsDone();
  }

  @Override
  public void perform() {
    if (mFiles.isEmpty())
      pr("(please specify an ." + SOURCE_EXT + " files)");
    File sourceFile = mFiles.get(0);
    File targetFile = null;
    if (mFiles.size() >= 2)
      targetFile = mFiles.get(1);
    processSourceFile(sourceFile, targetFile);
  }

  private static final String SOURCE_EXT = "rxp";
  private static final String OBJECT_EXT = "dfa";

  private void processSourceFile(File sourceFile, File targetFile) {
    sourceFile = assertExt(Files.addExtension(sourceFile, SOURCE_EXT), SOURCE_EXT);

    if (!sourceFile.exists())
      setError("No such file:", sourceFile);

    if (Files.empty(targetFile))
      targetFile = Files.setExtension(sourceFile, OBJECT_EXT);
    assertExt(targetFile, OBJECT_EXT);

    DFACompiler compiler = new DFACompiler();
    compiler.setVerbose(verbose());
    JSMap jsonMap = compiler.parse(Files.readString(sourceFile));
    String str = jsonMap.toString();
    files().writeIfChanged(targetFile, str);
    procIdsFile(compiler.tokenNames());
  }

  /**
   * If an ids source file argument was given, write the token ids to it
   */
  private void procIdsFile(List<String> tokenNames) {
    if (Files.empty(mIdSourceFile))
      return;

    File idFile = Files.addExtension(mIdSourceFile, "java");

    // Look for markers denoting the section of the file containing the token id constants.
    // If not found, append to the end of the file.
    //
    String marker0 = "// Token Ids generated by 'dev dfa' tool (DO NOT EDIT BELOW)\n";
    String marker1 = "// End of token Ids generated by 'dev dfa' tool (DO NOT EDIT ABOVE)\n";

    String content = Files.readString(idFile, "");
    if (content.isEmpty()) {
      log("Ids file didn't exist, creating it:", idFile);
      content = marker0 + marker1;
    }

    String beforeText = "";
    String afterText = "";

    String symbolPrefix = "T_";
    int indent = 4;
    int m0 = content.indexOf(marker0);
    int m1 = content.indexOf(marker1);
    if (m0 < 0 || m1 < 0 || m1 <= m0) {
      log("Invalid or missing markers in ids file:", idFile);
      beforeText = content;
      afterText = "";
    } else {

      {
        // Use the number of spaces that the first marker is indented to determine the indentation
        int j;
        for (j = 0;; j++) {
          int i = m0 - j - 1;
          if (i < 0 || content.charAt(i) == '\n')
            break;
        }
        indent = j;
      }

      String existingText;
      boolean success = false;
      do {
        // Look to existing first symbol to infer prefix
        existingText = content.substring(m0 + marker0.length(), m1);
        String tag = "static final int";
        int j = existingText.indexOf(tag);
        if (j < 0)
          break;
        tag = existingText.substring(j + tag.length()).trim();
        j = tag.indexOf('_');
        if (j < 0)
          break;
        symbolPrefix = tag.substring(0, j + 1).trim();
        success = true;
      } while (false);
      if (!success)
        log("Can't infer prefix from:", existingText);

      beforeText = content.substring(0, m0);
      afterText = content.substring(m1 + marker1.length());
    }

    StringBuilder sb = new StringBuilder();
    sb.append(beforeText);
    sb.append(marker0);

    String tab = spaces(indent);
    int index = INIT_INDEX;
    for (String tokenName : tokenNames) {
      index++;
      sb.append(tab);
      sb.append("public static final int ");
      sb.append(symbolPrefix);
      sb.append(tokenName);
      sb.append(" = ");
      sb.append(index);
      sb.append(";\n");
    }
    sb.append(tab);
    sb.append(marker1);
    sb.append(afterText);

    files().writeIfChanged(idFile, sb.toString());
  }

  private File assertExt(File file, String ext) {
    if (!Files.getExtension(file).equals(ext))
      setError("Not a ." + ext + " file:", file);
    return file;
  }

  private List<File> mFiles = arrayList();
  private File mIdSourceFile;

}
