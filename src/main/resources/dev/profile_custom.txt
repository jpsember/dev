# Designed to be included (sourced) by the normal shell startup script
# (e.g., .profile or .bash_profile)
#

export PROJECT_DIR="[!project_dir]"


# Set prompt

if [[ $TERMCAP =~ screen ]]
then
  # We're in a 'screen' session
  export PS1="{{{SCREEN: [!entity_id]}}} \W> "
  echo "================ This is a screen session ================"
  echo
  echo "To leave session running and exit:  ^a ^d"
  echo "To quit session and exit: ^d"
  echo "To resume screen session: screen -r"
  echo
else
  export PS1="([!entity_id]) \W} "
fi

alias ls="ls -l"
alias show="unzip -l"

# Show history without line numbers
alias hist="history | cut -c 8-"


# Enhance the 'cd' command; push old directories onto a stack.
# These additional commands are now available:
#   f    : flip between current and last directory
#   p    : return (pop) to last directory
#
pushd()
{
  if [ $# -eq 0 ]; then
    DIR="${HOME}"
  else
    DIR="$1"
  fi

  builtin pushd "${DIR}" > /dev/null
}

pushd_builtin()
{
  builtin pushd > /dev/null
}

popd()
{
  builtin popd > /dev/null
}

alias cd='pushd'
alias p='popd'
alias f='pushd_builtin'

# Include our custom ~/bin directory in the path, as well as .local/bin which tensorflow installation warns about if missing:
#
export PATH=.:$HOME/bin:$HOME/.local/bin:$PROJECT_DIR/source/scripts:$PATH



#####
# 
# Configure pyenv (not sure this will work consistently across RPi and Intel machines)
#
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PATH:$PYENV_ROOT/bin"

# Allow pyenv to select specific Python versions
#
eval "$(pyenv init --path)"
#
#####








# Remove duplicates in PATH
#
export PATH="$(perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"

# Start in the project directory
#
cd $PROJECT_DIR
